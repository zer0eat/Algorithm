# 최소합_14171# input.txt 열기import syssys.stdin = open('input.txt')def rightdown(a):                               # 이동경우를 확인하는 함수를 만들고    global record                               # record 변수를 불러와서    if a == len(bit):                           # 모든 요소에 대해 비트를 결정했을 때        if sum(bit) == len(bit)//2:             # 부분집합 중 도착지에 도착하는 경우만            tmp = arr[0][0]                     # 이동거리의 합을 저장할 변수            i = 0                               # 현재 위치의 행 인덱스            j = 0                               # 현재 위치의 열 인덱스            for b in range(len(bit)):           # 비트를 따라 이동할때                if bit[b] == 1:                 # 오른쪽                    j += 1                      # 오른쪽으로 이동해서                    tmp += arr[i][j]            # 그 수를 tmp에 더하고                    if tmp > record:            # record 보다 커진 경우에는 함수를 종료                        return                elif bit[b] == 0:               # 아래                    i += 1                      # 아래쪽으로 이동해서                    tmp += arr[i][j]            # 그 수를 tmp에 더하고                    if tmp > record:            # record 보다 커진 경우에는 함수를 종료                        return            else:                               # 도착지에 도착했을 때                if tmp < record:                # record 보다 작은 경우에는                    record = tmp                # record에 tmp를 저장하고 함수를 종료료                    return        return    bit[a] = 0                                  # 비트를 0으로 저장하고    rightdown(a + 1)                            # 다음 인덱스의 비트를 결정하기 위한 함수로 들어간다    bit[a] = 1                                  # 비트를 0으로 부분집합을 구하고 나왔다면 이번에는 비트를 1로 저장하고    rightdown(a + 1)                            # 다음 인덱스의 비트를 결정하기 위한 함수로 들어간다# input 받기T = int(input())                                # 테스트 케이스for t in range(T):                              # 테스트 케이스를 반복할 때    N = int(input())                            # 행렬의 길이를 받음    arr = [list(map(int, input().split())) for _ in range(N)]   # 이동할 지도를 행렬형태도 받음    right = N - 1                               # 도착점으로 이동하기 위해 오른쪽으로 이동해야하는 수    bit = [0] * (right*2)                       # 이동할 경우의 수를 확인 하기 위한 비트리스트    record = 10 * (right*2)                     # 최소거리로 이동할 때 합을 저장할 변수    rightdown(0)                                # 함수를 돌려 최소거리 찾기    print(f'#{t + 1}', record)